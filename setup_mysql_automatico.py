#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script autom√°tico para configurar MySQL
Crea usuario ilsanmes y todas las tablas necesarias
"""

import pymysql

def conectar_como_root():
    """Conectar como usuario root con credenciales comunes"""
    print("üîê Intentando conectar como root...")
    
    # Credenciales comunes de root
    credenciales_root = [
        ('root', ''),  # Sin contrase√±a
        ('root', 'root'),  # Contrase√±a root
        ('root', 'admin'),  # Contrase√±a admin
        ('root', 'password'),  # Contrase√±a password
        ('root', '123456'),  # Contrase√±a 123456
        ('admin', 'admin'),  # Usuario admin
        ('mysql', 'mysql'),  # Usuario mysql
    ]
    
    for usuario, password in credenciales_root:
        try:
            print(f"   Probando {usuario}/{password if password else '(sin contrase√±a)'}...")
            connection = pymysql.connect(
                host='100.111.108.116',
                port=3306,
                user=usuario,
                password=password,
                charset='utf8mb4',
                autocommit=True,
                connect_timeout=10
            )
            print(f"‚úÖ Conectado como {usuario}@100.111.108.116:3306")
            return connection
        except Exception as e:
            print(f"   ‚ùå Fall√≥: {str(e)[:50]}...")
            continue
    
    print("‚ùå No se pudo conectar con ninguna credencial de root")
    return None

def crear_usuario_y_bd(connection):
    """Crear usuario ilsanmes y base de datos isemm_mes"""
    cursor = connection.cursor()
    
    print("\nüîß Configurando usuario y base de datos...")
    
    try:
        # Crear base de datos
        cursor.execute("CREATE DATABASE IF NOT EXISTS isemm_mes CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci")
        print("‚úÖ Base de datos 'isemm_mes' creada")
        
        # Crear usuario (eliminar si existe)
        try:
            cursor.execute("DROP USER IF EXISTS 'ilsanmes'@'%'")
            print("‚ÑπÔ∏è Usuario anterior eliminado")
        except:
            pass
            
        cursor.execute("CREATE USER 'ilsanmes'@'%' IDENTIFIED BY 'ISEMM2025'")
        print("‚úÖ Usuario 'ilsanmes' creado")
        
        # Otorgar todos los permisos en la base de datos
        cursor.execute("GRANT ALL PRIVILEGES ON isemm_mes.* TO 'ilsanmes'@'%'")
        cursor.execute("GRANT ALL PRIVILEGES ON isemm_mes.* TO 'ilsanmes'@'localhost'")
        cursor.execute("FLUSH PRIVILEGES")
        print("‚úÖ Permisos otorgados a 'ilsanmes'")
        
        # Verificar que el usuario puede conectar
        cursor.execute("SELECT User, Host FROM mysql.user WHERE User = 'ilsanmes'")
        results = cursor.fetchall()
        if results:
            print("‚úÖ Usuario verificado:")
            for result in results:
                print(f"   - {result[0]}@{result[1]}")
        
    except Exception as e:
        print(f"‚ùå Error configurando usuario/BD: {e}")
        return False
    
    finally:
        cursor.close()
    
    return True

def conectar_como_ilsanmes():
    """Conectar como usuario ilsanmes"""
    try:
        connection = pymysql.connect(
            host='100.111.108.116',
            port=3306,
            user='ilsanmes',
            password='ISEMM2025',
            database='isemm_mes',
            charset='utf8mb4',
            autocommit=True,
            connect_timeout=10
        )
        print("‚úÖ Conectado como ilsanmes a base de datos isemm_mes")
        return connection
    except Exception as e:
        print(f"‚ùå Error conectando como ilsanmes: {e}")
        return None

def crear_tablas(connection):
    """Crear todas las tablas necesarias"""
    cursor = connection.cursor()
    
    tablas = {
        'materiales': """
            CREATE TABLE IF NOT EXISTS materiales (
                id INT AUTO_INCREMENT PRIMARY KEY,
                numero_parte VARCHAR(100) UNIQUE NOT NULL,
                descripcion TEXT,
                categoria VARCHAR(100),
                ubicacion VARCHAR(100),
                cantidad_disponible INT DEFAULT 0,
                cantidad_minima INT DEFAULT 0,
                unidad_medida VARCHAR(50),
                costo_unitario DECIMAL(10,2),
                proveedor VARCHAR(200),
                fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                prohibidoSacar BOOLEAN DEFAULT FALSE,
                reparable BOOLEAN DEFAULT FALSE,
                activo BOOLEAN DEFAULT TRUE
            )
        """,
        
        'inventario_general': """
            CREATE TABLE IF NOT EXISTS inventario_general (
                id INT AUTO_INCREMENT PRIMARY KEY,
                numero_parte VARCHAR(100) NOT NULL,
                descripcion TEXT,
                cantidad_disponible INT DEFAULT 0,
                ubicacion VARCHAR(100),
                fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
            )
        """,
        
        'entrada_aereo': """
            CREATE TABLE IF NOT EXISTS entrada_aereo (
                id INT AUTO_INCREMENT PRIMARY KEY,
                numero_parte VARCHAR(100) NOT NULL,
                descripcion TEXT,
                cantidad INT NOT NULL,
                ubicacion VARCHAR(100),
                fecha_entrada TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                usuario VARCHAR(100),
                observaciones TEXT
            )
        """,
        
        'control_material_almacen': """
            CREATE TABLE IF NOT EXISTS control_material_almacen (
                id INT AUTO_INCREMENT PRIMARY KEY,
                numero_parte VARCHAR(100) NOT NULL,
                descripcion TEXT,
                cantidad_entrada INT DEFAULT 0,
                cantidad_salida INT DEFAULT 0,
                cantidad_actual INT DEFAULT 0,
                ubicacion VARCHAR(100),
                fecha_movimiento TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                tipo_movimiento ENUM('entrada', 'salida') NOT NULL,
                usuario VARCHAR(100),
                observaciones TEXT
            )
        """,
        
        'control_material_produccion': """
            CREATE TABLE IF NOT EXISTS control_material_produccion (
                id INT AUTO_INCREMENT PRIMARY KEY,
                numero_parte VARCHAR(100) NOT NULL,
                descripcion TEXT,
                cantidad_requerida INT NOT NULL,
                cantidad_utilizada INT DEFAULT 0,
                orden_produccion VARCHAR(100),
                fecha_asignacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                fecha_utilizacion TIMESTAMP NULL,
                estado ENUM('asignado', 'en_uso', 'completado', 'cancelado') DEFAULT 'asignado',
                usuario VARCHAR(100),
                observaciones TEXT
            )
        """,
        
        'control_calidad': """
            CREATE TABLE IF NOT EXISTS control_calidad (
                id INT AUTO_INCREMENT PRIMARY KEY,
                numero_parte VARCHAR(100) NOT NULL,
                lote VARCHAR(100),
                cantidad_inspeccionada INT NOT NULL,
                cantidad_aprobada INT DEFAULT 0,
                cantidad_rechazada INT DEFAULT 0,
                fecha_inspeccion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                inspector VARCHAR(100),
                resultado ENUM('aprobado', 'rechazado', 'pendiente') DEFAULT 'pendiente',
                observaciones TEXT,
                criterios_calidad JSON
            )
        """,
        
        'bom': """
            CREATE TABLE IF NOT EXISTS bom (
                id INT AUTO_INCREMENT PRIMARY KEY,
                modelo VARCHAR(100) NOT NULL,
                numero_parte VARCHAR(100) NOT NULL,
                descripcion TEXT,
                cantidad_requerida DECIMAL(10,3) NOT NULL,
                unidad VARCHAR(50),
                nivel INT DEFAULT 1,
                fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                activo BOOLEAN DEFAULT TRUE,
                INDEX idx_modelo (modelo),
                INDEX idx_numero_parte (numero_parte)
            )
        """,
        
        'usuarios': """
            CREATE TABLE IF NOT EXISTS usuarios (
                id INT AUTO_INCREMENT PRIMARY KEY,
                username VARCHAR(50) UNIQUE NOT NULL,
                password_hash VARCHAR(255) NOT NULL,
                email VARCHAR(100),
                nombre_completo VARCHAR(200),
                rol ENUM('admin', 'supervisor', 'operador', 'viewer') DEFAULT 'viewer',
                departamento VARCHAR(100),
                activo BOOLEAN DEFAULT TRUE,
                fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                ultimo_acceso TIMESTAMP NULL,
                intentos_fallidos INT DEFAULT 0,
                bloqueado_hasta TIMESTAMP NULL
            )
        """,
        
        'usuarios_sistema': """
            CREATE TABLE IF NOT EXISTS usuarios_sistema (
                id INT AUTO_INCREMENT PRIMARY KEY,
                username VARCHAR(50) UNIQUE NOT NULL,
                password_hash VARCHAR(255) NOT NULL,
                email VARCHAR(100),
                nombre_completo VARCHAR(200),
                departamento VARCHAR(100),
                cargo VARCHAR(100),
                activo BOOLEAN DEFAULT TRUE,
                fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                ultimo_acceso TIMESTAMP NULL,
                intentos_fallidos INT DEFAULT 0,
                bloqueado_hasta TIMESTAMP NULL,
                creado_por VARCHAR(50),
                modificado_por VARCHAR(50),
                fecha_modificacion TIMESTAMP NULL
            )
        """,
        
        'roles': """
            CREATE TABLE IF NOT EXISTS roles (
                id INT AUTO_INCREMENT PRIMARY KEY,
                nombre VARCHAR(50) UNIQUE NOT NULL,
                descripcion TEXT,
                permisos JSON,
                activo BOOLEAN DEFAULT TRUE,
                fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """,
        
        'usuario_roles': """
            CREATE TABLE IF NOT EXISTS usuario_roles (
                id INT AUTO_INCREMENT PRIMARY KEY,
                usuario_id INT NOT NULL,
                rol_id INT NOT NULL,
                fecha_asignacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                activo BOOLEAN DEFAULT TRUE,
                UNIQUE KEY unique_usuario_rol (usuario_id, rol_id)
            )
        """,
        
        'permisos_botones': """
            CREATE TABLE IF NOT EXISTS permisos_botones (
                id INT AUTO_INCREMENT PRIMARY KEY,
                usuario VARCHAR(50) NOT NULL,
                boton VARCHAR(100) NOT NULL,
                permitido BOOLEAN DEFAULT FALSE,
                fecha_asignacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE KEY unique_usuario_boton (usuario, boton)
            )
        """,
        
        'configuracion': """
            CREATE TABLE IF NOT EXISTS configuracion (
                id INT AUTO_INCREMENT PRIMARY KEY,
                clave VARCHAR(100) UNIQUE NOT NULL,
                valor TEXT,
                descripcion TEXT,
                tipo ENUM('string', 'number', 'boolean', 'json') DEFAULT 'string',
                fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
            )
        """
    }
    
    print("\nüîß Creando tablas en MySQL...")
    
    tablas_creadas = 0
    for nombre_tabla, sql in tablas.items():
        try:
            cursor.execute(sql)
            print(f"‚úÖ Tabla '{nombre_tabla}' creada exitosamente")
            tablas_creadas += 1
        except Exception as e:
            print(f"‚ùå Error creando tabla '{nombre_tabla}': {e}")
    
    cursor.close()
    print(f"\nüéâ Proceso completado: {tablas_creadas}/{len(tablas)} tablas creadas")
    return tablas_creadas

def insertar_datos_iniciales(connection):
    """Insertar datos iniciales necesarios"""
    cursor = connection.cursor()
    
    print("\nüìù Insertando datos iniciales...")
    
    datos_insertados = 0
    
    # Insertar usuario administrador por defecto
    try:
        cursor.execute("""
            INSERT IGNORE INTO usuarios (username, password_hash, email, nombre_completo, rol, departamento)
            VALUES (%s, %s, %s, %s, %s, %s)
        """, ('admin', 'admin123', 'admin@isemm.com', 'Administrador del Sistema', 'admin', 'TI'))
        if cursor.rowcount > 0:
            print("‚úÖ Usuario administrador creado (admin/admin123)")
            datos_insertados += 1
        else:
            print("‚ÑπÔ∏è Usuario administrador ya existe")
    except Exception as e:
        print(f"‚ö†Ô∏è Usuario administrador: {e}")
    
    # Insertar roles b√°sicos
    roles_basicos = [
        ('admin', 'Administrador del sistema', '{"all": true}'),
        ('supervisor', 'Supervisor de √°rea', '{"read": true, "write": true, "delete": false}'),
        ('operador', 'Operador de producci√≥n', '{"read": true, "write": true, "delete": false}'),
        ('viewer', 'Solo lectura', '{"read": true, "write": false, "delete": false}')
    ]
    
    for nombre, descripcion, permisos in roles_basicos:
        try:
            cursor.execute("""
                INSERT IGNORE INTO roles (nombre, descripcion, permisos)
                VALUES (%s, %s, %s)
            """, (nombre, descripcion, permisos))
            if cursor.rowcount > 0:
                print(f"‚úÖ Rol '{nombre}' creado")
                datos_insertados += 1
            else:
                print(f"‚ÑπÔ∏è Rol '{nombre}' ya existe")
        except Exception as e:
            print(f"‚ö†Ô∏è Rol '{nombre}': {e}")
    
    # Insertar configuraciones b√°sicas
    configuraciones = [
        ('sistema_nombre', 'ISEMM MES', 'Nombre del sistema', 'string'),
        ('version', '2.0.0', 'Versi√≥n del sistema', 'string'),
        ('backup_automatico', 'true', 'Activar backup autom√°tico', 'boolean'),
        ('max_intentos_login', '3', 'M√°ximo intentos de login', 'number')
    ]
    
    for clave, valor, descripcion, tipo in configuraciones:
        try:
            cursor.execute("""
                INSERT IGNORE INTO configuracion (clave, valor, descripcion, tipo)
                VALUES (%s, %s, %s, %s)
            """, (clave, valor, descripcion, tipo))
            if cursor.rowcount > 0:
                print(f"‚úÖ Configuraci√≥n '{clave}' creada")
                datos_insertados += 1
            else:
                print(f"‚ÑπÔ∏è Configuraci√≥n '{clave}' ya existe")
        except Exception as e:
            print(f"‚ö†Ô∏è Configuraci√≥n '{clave}': {e}")
    
    cursor.close()
    print(f"\n‚úÖ Datos iniciales: {datos_insertados} registros nuevos insertados")
    return datos_insertados

def mostrar_resumen_final():
    """Mostrar resumen final de la configuraci√≥n"""
    print("\n" + "="*60)
    print("üéâ ¬°CONFIGURACI√ìN MYSQL COMPLETADA EXITOSAMENTE!")
    print("="*60)
    print("\nüìä CONFIGURACI√ìN FINAL:")
    print("   üè† Servidor: 100.111.108.116:3306")
    print("   üóÑÔ∏è Base de datos: isemm_mes")
    print("   üë§ Usuario MySQL: ilsanmes")
    print("   üîë Contrase√±a: ISEMM2025")
    print("\nüìã TABLAS PRINCIPALES:")
    print("   ‚úÖ materiales - Cat√°logo de materiales")
    print("   ‚úÖ inventario_general - Control de inventario")
    print("   ‚úÖ entrada_aereo - Entradas de material a√©reo")
    print("   ‚úÖ control_material_almacen - Control de almac√©n")
    print("   ‚úÖ control_material_produccion - Control de producci√≥n")
    print("   ‚úÖ control_calidad - Control de calidad")
    print("   ‚úÖ bom - Bill of Materials")
    print("   ‚úÖ usuarios - Sistema de usuarios")
    print("   ‚úÖ roles - Roles y permisos")
    print("   ‚úÖ configuracion - Configuraciones del sistema")
    print("\nüë§ CREDENCIALES DE ACCESO:")
    print("   Usuario aplicaci√≥n: admin")
    print("   Contrase√±a: admin123")
    print("\nüöÄ PR√ìXIMOS PASOS:")
    print("   1. Reiniciar la aplicaci√≥n Flask")
    print("   2. La aplicaci√≥n detectar√° MySQL autom√°ticamente")
    print("   3. Iniciar sesi√≥n con admin/admin123")
    print("   4. Comenzar a usar el sistema ISEMM MES")
    print("\n‚úÖ ¬°Sistema completamente configurado y listo para usar!")

def main():
    """Funci√≥n principal"""
    print("üöÄ CONFIGURACI√ìN AUTOM√ÅTICA DE MYSQL PARA ISEMM MES")
    print("üìç Servidor: 100.111.108.116:3306")
    print("üéØ Objetivo: Crear usuario 'ilsanmes' y todas las tablas")
    print("="*60)
    
    # Paso 1: Conectar como root
    root_conn = conectar_como_root()
    if not root_conn:
        print("\n‚ùå No se pudo conectar como root con ninguna credencial com√∫n.")
        print("\nüí° Soluciones manuales:")
        print("   1. Conectar al servidor MySQL manualmente")
        print("   2. Ejecutar: CREATE USER 'ilsanmes'@'%' IDENTIFIED BY 'ISEMM2025';")
        print("   3. Ejecutar: GRANT ALL PRIVILEGES ON *.* TO 'ilsanmes'@'%';")
        print("   4. Ejecutar: FLUSH PRIVILEGES;")
        print("   5. Volver a ejecutar este script")
        return
    
    # Paso 2: Crear usuario y base de datos
    if not crear_usuario_y_bd(root_conn):
        print("‚ùå Error creando usuario/base de datos")
        root_conn.close()
        return
    
    root_conn.close()
    print("\nüîå Conexi√≥n root cerrada")
    
    # Paso 3: Conectar como ilsanmes
    isemm_conn = conectar_como_ilsanmes()
    if not isemm_conn:
        print("‚ùå No se pudo conectar como ilsanmes")
        return
    
    try:
        # Paso 4: Crear tablas
        tablas_creadas = crear_tablas(isemm_conn)
        
        # Paso 5: Insertar datos iniciales
        datos_insertados = insertar_datos_iniciales(isemm_conn)
        
        # Paso 6: Mostrar resumen
        mostrar_resumen_final()
        
    except Exception as e:
        print(f"‚ùå Error durante la configuraci√≥n: {e}")
    
    finally:
        isemm_conn.close()
        print("\nüîå Conexi√≥n cerrada")

if __name__ == "__main__":
    main()