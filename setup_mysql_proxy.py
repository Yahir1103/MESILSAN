#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de configuraci√≥n para MySQL Proxy HTTP
Configura autom√°ticamente la conexi√≥n entre hosting y MySQL local v√≠a Tailscale
"""

import os
import sys
import subprocess
import time
import requests
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

def print_header(title):
    """Imprimir encabezado decorado"""
    print("\n" + "="*60)
    print(f"üöÄ {title}")
    print("="*60)

def print_step(step, description):
    """Imprimir paso del proceso"""
    print(f"\nüìã Paso {step}: {description}")
    print("-" * 50)

def check_dependencies():
    """Verificar dependencias necesarias"""
    print_step(1, "Verificando dependencias")
    
    required_packages = [
        'flask',
        'flask-cors', 
        'pymysql',
        'requests',
        'python-dotenv'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"‚úÖ {package} - Instalado")
        except ImportError:
            print(f"‚ùå {package} - Faltante")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è Instalando paquetes faltantes: {', '.join(missing_packages)}")
        try:
            subprocess.check_call([
                sys.executable, '-m', 'pip', 'install'
            ] + missing_packages)
            print("‚úÖ Paquetes instalados exitosamente")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Error instalando paquetes: {e}")
            return False
    
    return True

def test_mysql_direct():
    """Probar conexi√≥n directa a MySQL"""
    print_step(2, "Probando conexi√≥n directa a MySQL")
    
    try:
        import pymysql
        
        connection = pymysql.connect(
            host=os.getenv('MYSQL_HOST', '100.111.108.116'),
            port=int(os.getenv('MYSQL_PORT', '3306')),
            user=os.getenv('MYSQL_USERNAME', 'ILSANMES'),
            password=os.getenv('MYSQL_PASSWORD', 'ISEMM2025'),
            database=os.getenv('MYSQL_DATABASE', 'isemm2025'),
            connect_timeout=10
        )
        
        cursor = connection.cursor()
        cursor.execute("SELECT 1")
        result = cursor.fetchone()
        cursor.close()
        connection.close()
        
        if result:
            print("‚úÖ Conexi√≥n directa a MySQL exitosa")
            print(f"üìä Host: {os.getenv('MYSQL_HOST')}")
            print(f"üóÑÔ∏è Base de datos: {os.getenv('MYSQL_DATABASE')}")
            return True
        else:
            print("‚ùå Conexi√≥n directa fall√≥")
            return False
    
    except Exception as e:
        print(f"‚ùå Error en conexi√≥n directa: {e}")
        return False

def start_proxy_server():
    """Iniciar el servidor proxy en segundo plano"""
    print_step(3, "Iniciando servidor proxy MySQL")
    
    try:
        # Verificar si ya est√° corriendo
        try:
            response = requests.get('http://localhost:5001/health', timeout=5)
            if response.status_code == 200:
                print("‚úÖ Servidor proxy ya est√° corriendo")
                return True
        except:
            pass
        
        # Iniciar servidor
        print("üöÄ Iniciando servidor proxy...")
        
        # Ejecutar en segundo plano
        if os.name == 'nt':  # Windows
            subprocess.Popen([
                sys.executable, 'mysql_proxy_server.py'
            ], creationflags=subprocess.CREATE_NEW_CONSOLE)
        else:  # Linux/Mac
            subprocess.Popen([
                sys.executable, 'mysql_proxy_server.py'
            ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        
        # Esperar a que inicie
        print("‚è≥ Esperando que el servidor inicie...")
        for i in range(10):
            time.sleep(2)
            try:
                response = requests.get('http://localhost:5001/health', timeout=5)
                if response.status_code == 200:
                    print("‚úÖ Servidor proxy iniciado exitosamente")
                    return True
            except:
                print(f"‚è≥ Intento {i+1}/10...")
        
        print("‚ùå No se pudo iniciar el servidor proxy")
        return False
    
    except Exception as e:
        print(f"‚ùå Error iniciando servidor proxy: {e}")
        return False

def test_proxy_connection():
    """Probar conexi√≥n a trav√©s del proxy"""
    print_step(4, "Probando conexi√≥n HTTP al proxy")
    
    try:
        # Verificar salud del proxy
        response = requests.get('http://localhost:5001/health', timeout=10)
        if response.status_code == 200:
            health_data = response.json()
            print(f"‚úÖ Proxy saludable: {health_data.get('status')}")
            print(f"üìä MySQL: {health_data.get('mysql')}")
        else:
            print(f"‚ùå Proxy no saludable: {response.status_code}")
            return False
        
        # Probar consulta
        api_key = os.getenv('PROXY_API_KEY', 'ISEMM_PROXY_2024_SUPER_SECRETO')
        
        query_data = {
            'query': 'SELECT 1 as test',
            'fetch': 'one',
            'api_key': api_key
        }
        
        response = requests.post(
            'http://localhost:5001/execute',
            json=query_data,
            headers={'X-API-Key': api_key},
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            if result.get('success') and result.get('result', {}).get('test') == 1:
                print("‚úÖ Consulta de prueba exitosa")
                return True
            else:
                print(f"‚ùå Error en consulta: {result}")
                return False
        else:
            print(f"‚ùå Error HTTP: {response.status_code} - {response.text}")
            return False
    
    except Exception as e:
        print(f"‚ùå Error probando proxy: {e}")
        return False

def test_hybrid_config():
    """Probar configuraci√≥n h√≠brida"""
    print_step(5, "Probando configuraci√≥n h√≠brida")
    
    try:
        # Importar y probar config h√≠brida
        sys.path.append(os.path.join(os.getcwd(), 'app'))
        from config_mysql_hybrid import test_connection, get_connection_info
        
        info = get_connection_info()
        print(f"üìä Modo detectado: {info['mode']}")
        print(f"üîó Conexi√≥n directa: {info['direct_available']}")
        print(f"üåê Conexi√≥n HTTP: {info['http_available']}")
        
        if test_connection():
            print("‚úÖ Configuraci√≥n h√≠brida funcionando")
            return True
        else:
            print("‚ùå Error en configuraci√≥n h√≠brida")
            return False
    
    except Exception as e:
        print(f"‚ùå Error probando configuraci√≥n h√≠brida: {e}")
        return False

def generate_hosting_config():
    """Generar configuraci√≥n para el hosting"""
    print_step(6, "Generando configuraci√≥n para hosting")
    
    # Obtener IP p√∫blica o dominio
    try:
        response = requests.get('https://api.ipify.org', timeout=10)
        public_ip = response.text.strip()
        print(f"üì° IP p√∫blica detectada: {public_ip}")
    except:
        public_ip = "TU_IP_PUBLICA"
        print("‚ö†Ô∏è No se pudo detectar IP p√∫blica")
    
    hosting_env = f"""
# Configuraci√≥n para HOSTING (copiar a tu servidor)
# ================================================

# Base de datos MySQL (a trav√©s de proxy HTTP)
DB_TYPE=mysql
USE_HTTP_PROXY=true

# URL del proxy MySQL (cambiar por tu dominio/IP)
MYSQL_PROXY_URL=http://{public_ip}:5001

# Clave API (debe coincidir con el servidor proxy)
PROXY_API_KEY=ISEMM_PROXY_2024_SUPER_SECRETO

# Configuraci√≥n Flask
SECRET_KEY=tu_clave_secreta_super_segura_cambiar_en_produccion_2024
FLASK_ENV=production
FLASK_DEBUG=False

# Configuraci√≥n de seguridad
SESSION_COOKIE_SECURE=True
SESSION_COOKIE_HTTPONLY=True
SESSION_COOKIE_SAMESITE=Lax

# Configuraci√≥n de aplicaci√≥n
APP_NAME=ISEMM_MES
"""
    
    with open('hosting_config.env', 'w', encoding='utf-8') as f:
        f.write(hosting_env)
    
    print("‚úÖ Archivo 'hosting_config.env' generado")
    print("üìã Instrucciones para el hosting:")
    print("   1. Copia el contenido de 'hosting_config.env' a tu archivo .env en el hosting")
    print(f"   2. Aseg√∫rate de que el puerto 5001 est√© abierto en tu firewall")
    print(f"   3. Cambia la URL del proxy si usas un dominio en lugar de IP")
    print("   4. Instala las dependencias en el hosting: flask, flask-cors, requests, python-dotenv")

def show_final_instructions():
    """Mostrar instrucciones finales"""
    print_header("CONFIGURACI√ìN COMPLETADA")
    
    print("üéâ ¬°Configuraci√≥n del proxy MySQL completada exitosamente!")
    
    print("\nüìã RESUMEN:")
    print("‚úÖ Dependencias instaladas")
    print("‚úÖ Conexi√≥n directa a MySQL verificada")
    print("‚úÖ Servidor proxy iniciado")
    print("‚úÖ Conexi√≥n HTTP al proxy verificada")
    print("‚úÖ Configuraci√≥n h√≠brida funcionando")
    print("‚úÖ Configuraci√≥n para hosting generada")
    
    print("\nüöÄ PR√ìXIMOS PASOS:")
    print("\n1. PARA USO LOCAL:")
    print("   - Tu aplicaci√≥n ya puede usar la configuraci√≥n h√≠brida")
    print("   - Se conectar√° directamente a MySQL cuando est√© disponible")
    
    print("\n2. PARA HOSTING:")
    print("   - Copia el archivo 'hosting_config.env' a tu servidor")
    print("   - Ren√≥mbralo a '.env' en el hosting")
    print("   - Aseg√∫rate de que el puerto 5001 est√© abierto")
    print("   - Instala las dependencias necesarias")
    
    print("\n3. SEGURIDAD:")
    print("   - Cambia PROXY_API_KEY por una clave m√°s segura")
    print("   - Configura ALLOWED_HOSTS para restringir acceso")
    print("   - Considera usar HTTPS en producci√≥n")
    
    print("\nüîß COMANDOS √öTILES:")
    print("   - Iniciar proxy: python mysql_proxy_server.py")
    print("   - Probar conexi√≥n: python app/config_mysql_hybrid.py")
    print("   - Ver logs del proxy: tail -f mysql_proxy.log")
    
    print("\nüìû SOPORTE:")
    print("   - Si hay problemas, revisa los logs")
    print("   - Verifica que Tailscale est√© activo")
    print("   - Confirma que MySQL est√© corriendo")

def main():
    """Funci√≥n principal"""
    print_header("CONFIGURACI√ìN DE MYSQL PROXY HTTP")
    print("Este script configurar√° la conexi√≥n entre tu hosting y MySQL local")
    print("usando Tailscale como t√∫nel de red.")
    
    # Verificar dependencias
    if not check_dependencies():
        print("‚ùå Error en dependencias. Abortando.")
        return False
    
    # Probar MySQL directo
    if not test_mysql_direct():
        print("‚ùå No se puede conectar a MySQL. Verifica Tailscale y MySQL.")
        return False
    
    # Iniciar proxy
    if not start_proxy_server():
        print("‚ùå No se pudo iniciar el servidor proxy.")
        return False
    
    # Probar proxy
    if not test_proxy_connection():
        print("‚ùå El proxy no funciona correctamente.")
        return False
    
    # Probar configuraci√≥n h√≠brida
    if not test_hybrid_config():
        print("‚ùå Error en configuraci√≥n h√≠brida.")
        return False
    
    # Generar configuraci√≥n para hosting
    generate_hosting_config()
    
    # Mostrar instrucciones finales
    show_final_instructions()
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if success:
            print("\nüéâ ¬°Configuraci√≥n completada exitosamente!")
        else:
            print("\n‚ùå Configuraci√≥n fall√≥. Revisa los errores arriba.")
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Configuraci√≥n cancelada por el usuario.")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")