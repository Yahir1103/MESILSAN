#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para probar que el permiso de Control de BOM funcione correctamente despu√©s de la correcci√≥n
"""

import requests
import json
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

def crear_sesion():
    """Crear sesi√≥n con reintentos"""
    session = requests.Session()
    retry_strategy = Retry(
        total=3,
        status_forcelist=[429, 500, 502, 503, 504],
        allowed_methods=["HEAD", "GET", "OPTIONS", "POST"]
    )
    adapter = HTTPAdapter(max_retries=retry_strategy)
    session.mount("http://", adapter)
    session.mount("https://", adapter)
    return session

def hacer_login(session, usuario, password):
    """Realizar login en la aplicaci√≥n"""
    try:
        # Realizar login
        login_data = {
            'username': usuario,
            'password': password
        }
        
        response = session.post(
            'http://127.0.0.1:5000/login',
            data=login_data,
            allow_redirects=False
        )
        
        print(f"Login {usuario}: c√≥digo {response.status_code}")
        
        if response.status_code == 302:  # Redirecci√≥n exitosa
            print(f"‚úì Login exitoso para {usuario}")
            return True
        else:
            print(f"‚úó Login fallido para {usuario}")
            return False
            
    except Exception as e:
        print(f"‚úó Error en login para {usuario}: {e}")
        return False

def probar_permiso_control_bom(session):
    """Probar el permiso espec√≠fico de Control de BOM"""
    try:
        # Datos del permiso espec√≠fico de Control de BOM
        test_data = {
            'pagina': 'LISTA_INFORMACIONBASICA',
            'seccion': 'Control de produccion',
            'boton': 'Control de BOM'
        }
        
        response = session.post(
            'http://127.0.0.1:5000/admin/verificar_permiso_dropdown',
            json=test_data,
            headers={'Content-Type': 'application/json'}
        )
        
        print(f"\nVerificaci√≥n permiso Control de BOM: c√≥digo {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            tiene_permiso = data.get('tiene_permiso', False)
            
            if tiene_permiso:
                print(f"‚úÖ Usuario TIENE permiso para Control de BOM")
                print(f"  - Respuesta: {data}")
                return True
            else:
                print(f"‚ùå Usuario NO TIENE permiso para Control de BOM")
                print(f"  - Respuesta: {data}")
                return False
        else:
            print(f"‚úó Error verificando permiso: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚úó Error probando permiso Control de BOM: {e}")
        return False

def probar_obtener_permisos(session):
    """Probar obtener todos los permisos del usuario"""
    try:
        response = session.get('http://127.0.0.1:5000/admin/obtener_permisos_usuario_actual')
        print(f"\nObtener permisos usuario: c√≥digo {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úì Permisos obtenidos exitosamente")
            
            # Buscar espec√≠ficamente el permiso de Control de BOM
            permisos = data.get('permisos', {})
            
            if 'LISTA_INFORMACIONBASICA' in permisos:
                if 'Control de produccion' in permisos['LISTA_INFORMACIONBASICA']:
                    if 'Control de BOM' in permisos['LISTA_INFORMACIONBASICA']['Control de produccion']:
                        print(f"‚úÖ Control de BOM encontrado en permisos del usuario")
                        return True
                    else:
                        print(f"‚ùå Control de BOM NO encontrado en 'Control de produccion'")
                        print(f"  Botones disponibles: {permisos['LISTA_INFORMACIONBASICA']['Control de produccion']}")
                else:
                    print(f"‚ùå Secci√≥n 'Control de produccion' NO encontrada")
                    print(f"  Secciones disponibles: {list(permisos['LISTA_INFORMACIONBASICA'].keys())}")
            else:
                print(f"‚ùå P√°gina 'LISTA_INFORMACIONBASICA' NO encontrada")
                print(f"  P√°ginas disponibles: {list(permisos.keys())}")
            
            return False
        else:
            print(f"‚úó Error obteniendo permisos: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚úó Error probando obtener permisos: {e}")
        return False

def main():
    print("=== Prueba de Control de BOM Corregido ===")
    
    # Crear sesi√≥n
    session = crear_sesion()
    
    # Probar login con usuario Problema
    if hacer_login(session, 'Problema', 'Problema'):
        print("\n--- Probando permisos de Control de BOM ---")
        
        # Probar verificaci√≥n espec√≠fica del permiso
        permiso_especifico_ok = probar_permiso_control_bom(session)
        
        # Probar obtener todos los permisos
        permisos_generales_ok = probar_obtener_permisos(session)
        
        print("\n=== Resumen ===")
        print(f"‚úì Login: Exitoso")
        print(f"{'‚úì' if permiso_especifico_ok else '‚úó'} Verificaci√≥n espec√≠fica: {'Exitoso' if permiso_especifico_ok else 'Fallido'}")
        print(f"{'‚úì' if permisos_generales_ok else '‚úó'} Permisos generales: {'Exitoso' if permisos_generales_ok else 'Fallido'}")
        
        if permiso_especifico_ok and permisos_generales_ok:
            print("\nüéâ Control de BOM funciona correctamente")
            print("üí° El usuario deber√≠a poder acceder sin problemas")
        else:
            print("\n‚ö†Ô∏è A√∫n hay problemas con los permisos de Control de BOM")
    else:
        print("\n‚úó No se pudo realizar login, verificar credenciales")

if __name__ == '__main__':
    main()