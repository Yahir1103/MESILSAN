// ===============================================
// SCRIPT BALANCEADO PARA DROPDOWNS EN DESKTOP
// ===============================================

document.addEventListener('DOMContentLoaded', function() {
    // Solo ejecutar en desktop (NO en m√≥vil) - VERIFICACI√ìN M√öLTIPLE
    if (window.innerWidth > 768) {
        console.log('üñ•Ô∏è Inicializando dropdowns balanceados para desktop...');
        
        // Limpiar cualquier interferencia de scripts m√≥viles
        if (window.mobileListas) {
            window.mobileListas.cleanup();
            window.mobileListas = null;
        }
        
        // Esperar a que Bootstrap se cargue completamente
        setTimeout(() => {
            initBalancedDropdowns();
        }, 300);
    } else {
        console.log('üì± M√≥vil detectado - No inicializar dropdowns de desktop');
    }
});

function initBalancedDropdowns() {
    const dropdownButtons = document.querySelectorAll('.sidebar-dropdown-btn[data-bs-toggle="collapse"]');
    
    console.log(`üîç Encontrados ${dropdownButtons.length} botones de dropdown`);
    
    dropdownButtons.forEach((button, index) => {
        const targetSelector = button.getAttribute('data-bs-target');
        const targetElement = document.querySelector(targetSelector);
        
        if (!targetElement) return;
        
        console.log(`üîß Configurando dropdown balanceado ${index + 1}: ${targetSelector}`);
        
        // Obtener estado inicial
        const isInitiallyOpen = targetElement.classList.contains('show');
        
        // Variables para controlar el estado
        let isProcessingClick = false;
        let lastClickTime = 0;
        
        // Remover listeners anteriores y crear nuevo bot√≥n
        const newButton = button.cloneNode(true);
        button.parentNode.replaceChild(newButton, button);
        
        // Configurar estado inicial
        newButton.setAttribute('aria-expanded', isInitiallyOpen.toString());
        
        // Event listener principal
        newButton.addEventListener('click', function(e) {
            // VERIFICACI√ìN ADICIONAL - Solo en desktop
            if (window.innerWidth <= 768) {
                console.log('üö´ Click ignorado - estamos en m√≥vil');
                return;
            }
            
            const now = Date.now();
            
            // Prevenir clics m√∫ltiples r√°pidos
            if (isProcessingClick || (now - lastClickTime) < 300) {
                console.log('üö´ Click ignorado - demasiado r√°pido o procesando');
                e.preventDefault();
                e.stopPropagation();
                return false;
            }
            
            isProcessingClick = true;
            lastClickTime = now;
            
            console.log(`üñ±Ô∏è Click v√°lido en dropdown: ${targetSelector}`);
            
            const isCurrentlyOpen = targetElement.classList.contains('show');
            const willOpen = !isCurrentlyOpen;
            
            console.log(`üìä Estado: ${isCurrentlyOpen ? 'abierto' : 'cerrado'} ‚Üí ${willOpen ? 'abierto' : 'cerrado'}`);
            
            // Usar Bootstrap pero con protecci√≥n
            if (typeof bootstrap !== 'undefined' && bootstrap.Collapse) {
                try {
                    const bsCollapse = bootstrap.Collapse.getOrCreateInstance(targetElement, {
                        toggle: false // No auto-toggle para mayor control
                    });
                    
                    if (willOpen) {
                        bsCollapse.show();
                    } else {
                        bsCollapse.hide();
                    }
                } catch (error) {
                    console.warn('Error con Bootstrap, usando fallback:', error);
                    // Fallback manual
                    toggleManually(targetElement, newButton, willOpen);
                }
            } else {
                // Fallback manual si Bootstrap no est√° disponible
                toggleManually(targetElement, newButton, willOpen);
            }
            
            // Resetear flag despu√©s de un tiempo
            setTimeout(() => {
                isProcessingClick = false;
                console.log(`‚úÖ Procesamiento completado para ${targetSelector}`);
            }, 500);
            
            // Prevenir propagaci√≥n
            e.preventDefault();
            e.stopPropagation();
            return false;
        });
        
        // Listeners para eventos de Bootstrap (para debugging)
        targetElement.addEventListener('show.bs.collapse', function() {
            console.log(`üîÑ Bootstrap show: ${targetSelector}`);
            newButton.setAttribute('aria-expanded', 'true');
        });
        
        targetElement.addEventListener('hide.bs.collapse', function() {
            console.log(`üîÑ Bootstrap hide: ${targetSelector}`);
            newButton.setAttribute('aria-expanded', 'false');
        });
        
        targetElement.addEventListener('shown.bs.collapse', function() {
            console.log(`‚úÖ Bootstrap shown: ${targetSelector}`);
        });
        
        targetElement.addEventListener('hidden.bs.collapse', function() {
            console.log(`‚ùå Bootstrap hidden: ${targetSelector}`);
        });
        
        console.log(`‚úÖ Dropdown balanceado configurado: ${targetSelector}`);
    });
}

function toggleManually(targetElement, button, willOpen) {
    if (willOpen) {
        // Abrir con animaci√≥n manual
        targetElement.classList.remove('collapse');
        targetElement.classList.add('collapsing');
        targetElement.style.height = '0px';
        targetElement.style.display = 'block';
        
        // Obtener altura natural
        const scrollHeight = targetElement.scrollHeight;
        
        // Animar
        setTimeout(() => {
            targetElement.style.height = scrollHeight + 'px';
        }, 10);
        
        // Finalizar animaci√≥n
        setTimeout(() => {
            targetElement.classList.remove('collapsing');
            targetElement.classList.add('collapse', 'show');
            targetElement.style.height = '';
            button.setAttribute('aria-expanded', 'true');
        }, 350);
        
        console.log(`‚úÖ Abierto manualmente`);
    } else {
        // Cerrar con animaci√≥n manual
        targetElement.style.height = targetElement.scrollHeight + 'px';
        targetElement.classList.remove('collapse', 'show');
        targetElement.classList.add('collapsing');
        
        // Forzar reflow
        targetElement.offsetHeight;
        
        // Animar cierre
        targetElement.style.height = '0px';
        
        // Finalizar animaci√≥n
        setTimeout(() => {
            targetElement.classList.remove('collapsing');
            targetElement.classList.add('collapse');
            targetElement.style.display = 'none';
            targetElement.style.height = '';
            button.setAttribute('aria-expanded', 'false');
        }, 350);
        
        console.log(`‚ùå Cerrado manualmente`);
    }
}

// Verificar cambios de ventana
window.addEventListener('resize', function() {
    if (window.innerWidth > 768) {
        setTimeout(() => {
            console.log('üì±‚Üíüñ•Ô∏è Cambiando a desktop, reinicializando dropdowns balanceados...');
            initBalancedDropdowns();
        }, 300);
    }
});

console.log('üìÅ Script BALANCEADO de dropdowns cargado');
