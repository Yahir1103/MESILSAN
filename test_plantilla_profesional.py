#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
TEST PLANTILLA PROFESIONAL ZPL - Versi√≥n del usuario
==================================================

Este archivo prueba la plantilla ZPL profesional proporcionada por el usuario.
La plantilla es m√°s grande y profesional que las versiones anteriores.

Ejecutar: python test_plantilla_profesional.py
"""

import requests
import json
from datetime import datetime

def generar_zpl_plantilla_profesional(codigo_material):
    """Genera ZPL usando la plantilla profesional del usuario"""
    
    # Datos simulados del material
    lote = "L202501"
    parte = "P12345"
    cantidad = "100"
    propiedad = "RESIST"
    fecha = datetime.now().strftime("%d/%m/%Y")
    
    # QR ultra-compacto (misma f√≥rmula exitosa)
    qr_data = f"C:{codigo_material[:8]},L:{lote[:6]},P:{parte[:6]},Q:{cantidad[:3]},R:{propiedad[:5]}"
    
    # ZPL usando PLANTILLA PROFESIONAL del usuario
    zpl_command = f"""CT~~CD,~CC^~CT~
^XA
~TA000
~JSN
^LT37
^MNW
^MTT
^PON
^PMN
^LH0,0
^JMA
^PR4,4
~SD15
^JUS
^LRN
^CI27
^PA0,1,1,0
^XZ
^XA
^MMT
^PW392
^LL224
^LS0
^FT13,192^BQN,2,8
^FH\\^FDLA,{qr_data}^FS
^FT190,25^A0N,18,18^FH\\^CI28^FDILSAN ELECTRONICS MES^FS^CI27
^FT190,46^A0N,16,15^FH\\^CI28^FDCodigo de material recibido:^FS^CI27
^FT190,67^A0N,20,20^FH\\^CI28^FD{codigo_material}^FS^CI27
^FT190,88^A0N,15,15^FH\\^CI28^FDFecha de entrada: {fecha}^FS^CI27
^FT190,109^A0N,14,14^FH\\^CI28^FDLote: {lote} Parte: {parte}^FS^CI27
^FT190,130^A0N,14,14^FH\\^CI28^FDCantidad: {cantidad} Prop: {propiedad}^FS^CI27
^FT194,151^A0N,17,18^FH\\^CI28^FDHora: {datetime.now().strftime('%H:%M:%S')}^FS^CI27
^PQ1,0,1,Y
^XZ"""
    
    return zpl_command, qr_data

def mostrar_ventajas_plantilla_profesional():
    """Muestra las ventajas de la plantilla profesional"""
    print("üèÜ VENTAJAS DE LA PLANTILLA PROFESIONAL:")
    print("=" * 55)
    print("PLANTILLA ANTERIOR vs PLANTILLA PROFESIONAL:")
    print("  ‚Ä¢ Tama√±o: 264x112 ‚Üí 392x224 (+85% m√°s grande)")
    print("  ‚Ä¢ QR: BQN,2,4 ‚Üí BQN,2,8 (+100% m√°s grande)")
    print("  ‚Ä¢ Fuentes c√≥digo: ADN,14,10 ‚Üí A0N,20,20 (+43% m√°s grande)")
    print("  ‚Ä¢ Configuraci√≥n: B√°sica ‚Üí Profesional avanzada")
    print("  ‚Ä¢ Codificaci√≥n: Simple ‚Üí Unicode CI28")
    print("  ‚Ä¢ Layout: Compacto ‚Üí Descriptivo con etiquetas")
    print("  ‚Ä¢ Calidad: Est√°ndar ‚Üí Profesional")
    print("\n‚úÖ RESULTADO: Etiqueta PROFESIONAL de alta calidad")

def test_plantilla_profesional():
    """Test de la plantilla profesional"""
    print("üéØ === TEST PLANTILLA PROFESIONAL ===")
    print("=" * 45)
    
    # Generar c√≥digo de prueba
    codigo = f"PROF-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
    print(f"üìã C√≥digo de prueba: {codigo}")
    
    # Mostrar ventajas
    mostrar_ventajas_plantilla_profesional()
    
    # Generar ZPL con plantilla profesional
    zpl_command, qr_data = generar_zpl_plantilla_profesional(codigo)
    
    print(f"\nüìè AN√ÅLISIS PLANTILLA PROFESIONAL:")
    print(f"  ‚Ä¢ Longitud total: {len(zpl_command)} caracteres")
    print(f"  ‚Ä¢ QR compacto: {len(qr_data)} caracteres")
    print(f"  ‚Ä¢ Tama√±o etiqueta: 392x224 dots (GRANDE)")
    print(f"  ‚Ä¢ QR tama√±o: BQN,2,8 (MUCHO M√ÅS GRANDE)")
    print(f"  ‚Ä¢ Fuentes: A0N,20,20 (PROFESIONALES)")
    print(f"  ‚Ä¢ Codificaci√≥n: Unicode CI28")
    
    print(f"\nüì± CONTENIDO QR:")
    print(f"  '{qr_data}'")
    
    print(f"\nüñ®Ô∏è COMANDO ZPL PLANTILLA PROFESIONAL:")
    print("-" * 50)
    print(zpl_command)
    print("-" * 50)
    
    # Intentar enviar a print service
    try:
        print(f"\nüöÄ Enviando a print service...")
        
        url = "http://localhost:5002/print"
        payload = {
            "printer": "ZDesigner ZT230-300dpi ZPL",
            "zpl_command": zpl_command
        }
        
        response = requests.post(url, json=payload, timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ √âXITO: Plantilla PROFESIONAL enviada")
            print("üèÜ Esta deber√≠a ser la MEJOR calidad hasta ahora")
            resultado = response.json()
            if 'message' in resultado:
                print(f"   Mensaje: {resultado['message']}")
        else:
            print(f"‚ùå Error HTTP: {response.status_code}")
            print(f"   Respuesta: {response.text}")
            
    except requests.exceptions.ConnectionError:
        print("‚ö†Ô∏è Print service no disponible en localhost:5002")
        print("   Pero la PLANTILLA PROFESIONAL est√° lista para usar")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    print(f"\nüéä PLANTILLA PROFESIONAL IMPLEMENTADA:")
    print("  ‚úÖ Etiqueta M√ÅS GRANDE (392x224)")
    print("  ‚úÖ QR MUCHO M√ÅS GRANDE (BQN,2,8)")
    print("  ‚úÖ Fuentes profesionales grandes")
    print("  ‚úÖ Layout con etiquetas descriptivas")
    print("  ‚úÖ Codificaci√≥n Unicode")
    print("  ‚úÖ Configuraci√≥n avanzada de impresora")
    print("  ‚úÖ Calidad profesional")
    
    return zpl_command

def comparar_versiones():
    """Compara todas las versiones desarrolladas"""
    print("\nüìä EVOLUCI√ìN DE LAS ETIQUETAS:")
    print("=" * 45)
    print("1Ô∏è‚É£ Versi√≥n inicial: Texto muy peque√±o")
    print("2Ô∏è‚É£ Fuentes grandes: Solucion√≥ el problema")
    print("3Ô∏è‚É£ Medidas espec√≠ficas: 33.2mm x 14mm")
    print("4Ô∏è‚É£ Sin STRING TOO LONG: QR optimizado")
    print("5Ô∏è‚É£ Comandos espec√≠ficos: ^XFR:si.ZPL^FS")
    print("6Ô∏è‚É£ PLANTILLA PROFESIONAL: ¬°CALIDAD M√ÅXIMA!")
    print("\nüèÜ La plantilla profesional es la MEJOR versi√≥n")

def main():
    """Funci√≥n principal"""
    print("üèÜ PLANTILLA PROFESIONAL ZPL")
    print("=" * 40)
    print("Usando la plantilla profesional del usuario")
    print("Calidad profesional y tama√±o grande")
    print()
    
    # Ejecutar test
    zpl_profesional = test_plantilla_profesional()
    
    # Mostrar comparaci√≥n
    comparar_versiones()
    
    print(f"\nüí° INSTRUCCIONES DE USO:")
    print("1. Ejecute en navegador: testPlantillaProfesional()")
    print("2. O use este ZPL directamente")
    print("3. ¬°La calidad profesional es incomparable!")
    
    return zpl_profesional

if __name__ == "__main__":
    main()
